% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/design-flex.R
\name{flex}
\alias{flex}
\title{Flex layout}
\usage{
flex(
  x,
  direction = NULL,
  justify = NULL,
  align = NULL,
  wrap = NULL,
  reverse = NULL
)
}
\arguments{
\item{x}{A tag element or \link{.style} pronoun.}

\item{direction}{A \link{responsive} argument. One of \code{"row"} or \code{"column"}
specifying the placement of flex items, defaults to \code{NULL}. If \code{"row"}
items are placed vertically, if \code{"column"} items are placed horizontally.
Browsers place items vertically by default.}

\item{justify}{A \link{responsive} argument. One of \code{"start"}, \code{"end"},
\code{"center"}, \code{"between"}, or \code{"around"} specifying how items are
horizontally aligned, defaults to \code{NULL}. See the \strong{justify} section below
for more on how the different values affect horizontal spacing.}

\item{align}{A \link{responsive} argument. One of \code{"start"}, \code{"end"}, \code{"center"},
\code{"baseline"}, or \code{"stretch"} specifying how items are vertically aligned,
defaults to \code{NULL}. See the \strong{align} section below for more on how the
different values affect vertical spacing.}

\item{wrap}{A \link{responsive} argument. One of \code{TRUE} or \code{FALSE} specifying
whether to wrap flex items inside the flex container, \code{tag}, defaults to
\code{NULL}. If \code{TRUE} items wrap inside the container, if \code{FALSE} items will
not wrap. See the \strong{wrap} section below for more.}

\item{reverse}{A \link{responsive} argument. One of \code{TRUE} or \code{FALSE} specifying
if flex items are placed in reverse order, defaults to \code{NULL}. If \code{TRUE}
items are placed from right to left when \code{direction} is \code{"row"} or bottom
to top when \code{direction} is \code{"column"}.}
}
\description{
Use \code{flex()} to control how a flex container tag element places its flex
items or child tag elements. For more on turning a tag element into a flex
container see \code{\link[=display]{display()}}. By default tag elements within a flex container
are treated as flex items.
}
\details{
\subsection{Getting started}{

This section needs pretty specific examples of how to use flex. I don’t
know that people will want a tutorial on flex.

\if{html}{\out{<div class="sourceCode r">}}\preformatted{flex(

)
}\if{html}{\out{</div>}}
}

\subsection{Different \code{direction}s}{

Many of \code{flex()}’s arguments are viewport responsive and below we will
see how useful this can be. On small screens the flex items are placed
vertically and can occupy the full width of the mobile device. On medium
or larger screens the items are placed horizontally once again.

\if{html}{\out{<div class="sourceCode r">}}\preformatted{div(
  .style \%>\%
    display("flex") \%>\%
    flex(
      direction = list(xs = "column", md = "row")  # <-
    ) \%>\%
    background("secondary") \%>\%
    border(),
  div("A flex item") \%>\%
    padding(3) \%>\%
    border(),
  div("A flex item") \%>\%
    padding(3) \%>\%
    border(),
  div("A flex item") \%>\%
    padding(3) \%>\%
    border()
)
}\if{html}{\out{</div>}}\if{html}{\out{
<div class="d-flex flex-column flex-md-row bg-secondary border">
<div class="p-3 border">A flex item</div>
<div class="p-3 border">A flex item</div>
<div class="p-3 border">A flex item</div>
</div>
}}


\emph{Resize the browser for this example.}

You can keep items as a column by specifying only \code{"column"}.

\if{html}{\out{<div class="sourceCode r">}}\preformatted{div(
  .style \%>\%
    display("flex") \%>\%
    flex("column"),  # <-
  div("A flex item") \%>\%
    padding(3) \%>\%
    border(),
  div("A flex item") \%>\%
    padding(3) \%>\%
    border(),
  div("A flex item") \%>\%
    padding(3) \%>\%
    border()
)
}\if{html}{\out{</div>}}\if{html}{\out{
<div class="d-flex flex-column">
<div class="p-3 border">A flex item</div>
<div class="p-3 border">A flex item</div>
<div class="p-3 border">A flex item</div>
</div>
}}

}

\subsection{Spacing items with \code{justify}}{

Below is a series of examples showing how to change the horizontal
alignment of your flex items. Let’s start by pushing items to the
beginning of their parent container.

\if{html}{\out{<div class="sourceCode r">}}\preformatted{div(
  .style \%>\%
    display("flex") \%>\%
    flex(justify = "start"),  # <-
  div("A flex item") \%>\%
    padding(3) \%>\%
    border(),
  div("A flex item") \%>\%
    padding(3) \%>\%
    border(),
  div("A flex item") \%>\%
    padding(3) \%>\%
    border(),
  div("A flex item") \%>\%
    padding(3) \%>\%
    border()
)
}\if{html}{\out{</div>}}\if{html}{\out{
<div class="d-flex justify-content-start">
<div class="p-3 border">A flex item</div>
<div class="p-3 border">A flex item</div>
<div class="p-3 border">A flex item</div>
<div class="p-3 border">A flex item</div>
</div>
}}


We can also push items to the \strong{end}.

\if{html}{\out{<div class="sourceCode r">}}\preformatted{div(
  .style \%>\%
    display("flex") \%>\%
    flex(justify = "end"),  # <-
  div("A flex item") \%>\%
    padding(3) \%>\%
    border(),
  div("A flex item") \%>\%
    padding(3) \%>\%
    border(),
  div("A flex item") \%>\%
    padding(3) \%>\%
    border(),
  div("A flex item") \%>\%
    padding(3) \%>\%
    border()
)
}\if{html}{\out{</div>}}\if{html}{\out{
<div class="d-flex justify-content-end">
<div class="p-3 border">A flex item</div>
<div class="p-3 border">A flex item</div>
<div class="p-3 border">A flex item</div>
<div class="p-3 border">A flex item</div>
</div>
}}


Without using a table layout we can \strong{center} items.

\if{html}{\out{<div class="sourceCode r">}}\preformatted{div(
  .style \%>\%
    display("flex") \%>\%
    flex(justify = "center"),  # <-
  div("A flex item") \%>\%
    padding(3) \%>\%
    border(),
  div("A flex item") \%>\%
    padding(3) \%>\%
    border(),
  div("A flex item") \%>\%
    padding(3) \%>\%
    border(),
  div("A flex item") \%>\%
    padding(3) \%>\%
    border()
)
}\if{html}{\out{</div>}}\if{html}{\out{
<div class="d-flex justify-content-center">
<div class="p-3 border">A flex item</div>
<div class="p-3 border">A flex item</div>
<div class="p-3 border">A flex item</div>
<div class="p-3 border">A flex item</div>
</div>
}}


You can also put space \strong{between} items

\if{html}{\out{<div class="sourceCode r">}}\preformatted{div(
  .style \%>\%
    display("flex") \%>\%
    flex(justify = "between"),  # <-
  div("A flex item") \%>\%
    padding(3) \%>\%
    border(),
  div("A flex item") \%>\%
    padding(3) \%>\%
    border(),
  div("A flex item") \%>\%
    padding(3) \%>\%
    border(),
  div("A flex item") \%>\%
    padding(3) \%>\%
    border()
)
}\if{html}{\out{</div>}}\if{html}{\out{
<div class="d-flex justify-content-between">
<div class="p-3 border">A flex item</div>
<div class="p-3 border">A flex item</div>
<div class="p-3 border">A flex item</div>
<div class="p-3 border">A flex item</div>
</div>
}}


… or put space \strong{around} items.

\if{html}{\out{<div class="sourceCode r">}}\preformatted{div(
  .style \%>\%
    display("flex") \%>\%
    flex(justify = "around"),  # <-
  div("A flex item") \%>\%
    padding(3) \%>\%
    border(),
  div("A flex item") \%>\%
    padding(3) \%>\%
    border(),
  div("A flex item") \%>\%
    padding(3) \%>\%
    border(),
  div("A flex item") \%>\%
    padding(3) \%>\%
    border()
)
}\if{html}{\out{</div>}}\if{html}{\out{
<div class="d-flex justify-content-around">
<div class="p-3 border">A flex item</div>
<div class="p-3 border">A flex item</div>
<div class="p-3 border">A flex item</div>
<div class="p-3 border">A flex item</div>
</div>
}}


The \code{"between"} and \code{"around"} values come from the original CSS values
\code{"space-between"} and \code{"space-around"}.
\subsection{Wrap onto new lines}{

Using flexbox we can also control how items wrap onto new lines.

\if{html}{\out{<div class="sourceCode r">}}\preformatted{div(
  .style \%>\%
    display("flex") \%>\%
    flex(wrap = TRUE),
  div("A flex item") \%>\%
    padding(3) \%>\%
    border(),
  div("A flex item") \%>\%
    padding(3) \%>\%
    border(),
  div("A flex item") \%>\%
    padding(3) \%>\%
    border(),
  div("A flex item") \%>\%
    padding(3) \%>\%
    border()
)
}\if{html}{\out{</div>}}\if{html}{\out{
<div class="d-flex flex-wrap">
<div class="p-3 border">A flex item</div>
<div class="p-3 border">A flex item</div>
<div class="p-3 border">A flex item</div>
<div class="p-3 border">A flex item</div>
</div>
}}

}

}
}
\seealso{
Other design utilities: 
\code{\link{active}()},
\code{\link{affix}()},
\code{\link{background}()},
\code{\link{border}()},
\code{\link{display}()},
\code{\link{float}()},
\code{\link{font}()},
\code{\link{height}()},
\code{\link{margin}()},
\code{\link{padding}()},
\code{\link{scroll}()},
\code{\link{shadow}()},
\code{\link{width}()}
}
\concept{design utilities}
