% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/input-nav.R
\name{navInput}
\alias{navInput}
\alias{updateNavInput}
\title{Page navigation inputs}
\usage{
navInput(
  ...,
  id,
  choices = NULL,
  values = choices,
  selected = values[[1]],
  appearance = "links",
  fill = FALSE
)

updateNavInput(
  id,
  choices = NULL,
  values = choices,
  selected = NULL,
  enable = NULL,
  disable = NULL,
  session = getDefaultReactiveDomain()
)
}
\arguments{
\item{...}{Additional named arguments passed as HTML attributes to the
parent element or tag elements passed as child elements to the parent
element.}

\item{id}{A character string specifying the id of the reactive input.}

\item{choices}{A character vector or list of tag elements specifying the
navigation items of the input.}

\item{values}{A character vector specifying the values of the input's
choices, defaults to \code{choices}.}

\item{selected}{One of \code{values} specifying which choice is selected by
default, defaults to \code{values[[1]]}.}

\item{appearance}{One of \code{"links"}, \code{"pills"}, or \code{"tabs"} specifying the
appearance of the nav input, defaults to \code{"links"}.}

\item{fill}{One of \code{TRUE} or \code{FALSE} specifying if the nav input fills the
width of its parent element. If \code{TRUE}, the space is divided evenly among
the nav items.}

\item{enable}{One of \code{values} specifying particular choices to enable or
\code{TRUE} specifying the entire input is enabled, defaults to \code{NULL}.}

\item{disable}{One of \code{values} specifying particular choices to disable or
\code{TRUE} specifying the entire input is disabled, defaults to \code{NULL}.}

\item{session}{A reactive context, defaults to \code{\link[=getDefaultReactiveDomain]{getDefaultReactiveDomain()}}.}
}
\description{
A reactive input styled as a navigation control. The navigation input can be
styled as links, tabs, or pills. A nav input is paired with \code{\link[=navContent]{navContent()}}
and \code{\link[=showNavPane]{showNavPane()}} to create tabbed user interfaces. Observers and reactives
are triggered when a nav choice or menu item is clicked. The reactive value
of a nav input is \code{NULL} or a singleton character string. The value of any
menus in the nav input must be retrieved with its own reactive id.
}
\details{
\subsection{Nav styled as tabs}{

\if{html}{\out{<div class="sourceCode r">}}\preformatted{navInput(
  id = "tabs1",
  choices = c(
    "Tab 1",
    "Tab 2",
    "Tab 3"
  ),
  selected = "Tab 1",
  appearance = "tabs"
)
}\if{html}{\out{</div>}}\if{html}{\out{
<ul class="yonder-nav nav nav-tabs" id="tabs1">
<li class="nav-item">
<button class="nav-link btn btn-link active" value="Tab 1">Tab 1</button>
</li>
<li class="nav-item">
<button class="nav-link btn btn-link" value="Tab 2">Tab 2</button>
</li>
<li class="nav-item">
<button class="nav-link btn btn-link" value="Tab 3">Tab 3</button>
</li>
</ul>
}}

}

\subsection{Nav styled as pills}{

\if{html}{\out{<div class="sourceCode r">}}\preformatted{navInput(
  id = "tabs2",
  choices = paste("Tab", 1:3),
  selected = "Tab 1",
  appearance = "pills"
)
}\if{html}{\out{</div>}}\if{html}{\out{
<ul class="yonder-nav nav nav-pills" id="tabs2">
<li class="nav-item">
<button class="nav-link btn btn-link active" value="Tab 1">Tab 1</button>
</li>
<li class="nav-item">
<button class="nav-link btn btn-link" value="Tab 2">Tab 2</button>
</li>
<li class="nav-item">
<button class="nav-link btn btn-link" value="Tab 3">Tab 3</button>
</li>
</ul>
}}

}

\subsection{Nav with dropdown}{

\if{html}{\out{<div class="sourceCode r">}}\preformatted{navInput(
  id = "tabs3",
  choices = list(
    "Tab 1",
    menuInput(
      id = "menu1",
      label = "Tab 2",
      choices = c(
        "Action",
        "Another action"
      )
    ),
    "Tab 2"
  ),
  values = c("tab1", "tab2", "tab3")
)
}\if{html}{\out{</div>}}\if{html}{\out{
<ul class="yonder-nav nav" id="tabs3">
<li class="nav-item">
<button class="nav-link btn btn-link active" value="tab1">Tab 1</button>
</li>
<li class="yonder-menu dropdown nav-item" id="menu1">
<button class="btn dropdown-toggle nav-link btn-link" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" value="tab2">Tab 2</button>
<div class="dropdown-menu">
<button class="dropdown-item" type="button" value="Action">Action</button>
<button class="dropdown-item" type="button" value="Another action">Another action</button>
</div>
</li>
<li class="nav-item">
<button class="nav-link btn btn-link" value="tab3">Tab 2</button>
</li>
</ul>
}}

}

\subsection{Full width nav input}{

\if{html}{\out{<div class="sourceCode r">}}\preformatted{navInput(
  id = "tabs4",
  choices = paste("Tab", 1:5),
  values = paste0("tab", 1:5),
  appearance = "pills",
  fill = TRUE
)
}\if{html}{\out{</div>}}\if{html}{\out{
<ul class="yonder-nav nav nav-fill nav-pills" id="tabs4">
<li class="nav-item">
<button class="nav-link btn btn-link active" value="tab1">Tab 1</button>
</li>
<li class="nav-item">
<button class="nav-link btn btn-link" value="tab2">Tab 2</button>
</li>
<li class="nav-item">
<button class="nav-link btn btn-link" value="tab3">Tab 3</button>
</li>
<li class="nav-item">
<button class="nav-link btn btn-link" value="tab4">Tab 4</button>
</li>
<li class="nav-item">
<button class="nav-link btn btn-link" value="tab5">Tab 5</button>
</li>
</ul>
}}

}

\subsection{Centering a nav input}{

\if{html}{\out{<div class="sourceCode r">}}\preformatted{navInput(
  .style \%>\%
    flex(justify = "center"),
  id = NULL,
  choices = c("Tab 1", "Tab 2", "Tab 3")
)
}\if{html}{\out{</div>}}\if{html}{\out{
<ul class="yonder-nav nav justify-content-center">
<li class="nav-item">
<button class="nav-link btn btn-link active" value="Tab 1">Tab 1</button>
</li>
<li class="nav-item">
<button class="nav-link btn btn-link" value="Tab 2">Tab 2</button>
</li>
<li class="nav-item">
<button class="nav-link btn btn-link" value="Tab 3">Tab 3</button>
</li>
</ul>
}}

}
}
\seealso{
Other inputs: 
\code{\link{buttonGroupInput}()},
\code{\link{buttonInput}()},
\code{\link{checkbarInput}()},
\code{\link{checkboxInput}()},
\code{\link{chipInput}()},
\code{\link{fileInput}()},
\code{\link{formInput}()},
\code{\link{listGroupInput}()},
\code{\link{menuInput}()},
\code{\link{radioInput}()},
\code{\link{radiobarInput}()},
\code{\link{rangeInput}()},
\code{\link{selectInput}()},
\code{\link{textInput}()}
}
\concept{inputs}
