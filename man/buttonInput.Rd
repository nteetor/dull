% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/input-button.R, R/tooltip.R
\name{buttonInput}
\alias{buttonInput}
\alias{updateButtonInput}
\alias{linkInput}
\alias{updateLinkInput}
\alias{tooltip}
\title{Button and link inputs}
\usage{
buttonInput(..., id, label, stretch = FALSE, download = FALSE, tooltip = NULL)

updateButtonInput(
  id,
  label = NULL,
  value = NULL,
  disable = NULL,
  enable = NULL,
  tooltip = NULL,
  session = getDefaultReactiveDomain()
)

linkInput(..., id, label, stretch = FALSE, download = FALSE, tooltip = NULL)

updateLinkInput(
  id,
  label = NULL,
  value = NULL,
  enable = NULL,
  disable = NULL,
  tooltip = NULL,
  session = getDefaultReactiveDomain()
)

tooltip(..., placement = "top", fade = TRUE)
}
\arguments{
\item{...}{Additional named arguments passed as HTML attributes to the parent
element.}

\item{id}{A character string specifying the id of the reactive input.}

\item{label}{A character string specifying the label text on the button or
link input.}

\item{stretch}{One of \code{TRUE} or \code{FALSE} specifying stretched behaviour for
the button or link input, defaults to \code{FALSE}. If \code{TRUE}, the button or
link will receive clicks from its containing block element. For example, a
stretched button or link inside a \code{\link[=card]{card()}} would update whenever the user
clicked on the card.}

\item{download}{One of \code{TRUE} or \code{FALSE} specifying if the button or link
input is used to trigger a download, defaults to \code{FALSE}.}

\item{tooltip}{A call to \code{\link[=tooltip]{tooltip()}} specifying a tooltip for the button or
link input, defaults to \code{NULL}.}

\item{value}{A number specifying a new value for the button, defaults to
\code{NULL}.}

\item{disable}{if \code{TRUE} the button is disabled and will not react to clicks
from the user, default to \code{NULL}.}

\item{enable}{If \code{TRUE} the button is enabled and will react to clicks from
the user,  defaults to \code{NULL}.}

\item{session}{A reactive context, defaults to \code{\link[=getDefaultReactiveDomain]{getDefaultReactiveDomain()}}.}

\item{placement}{One of \code{"top"}, \code{"right"}, \code{"bottom"}, or \code{"left"}
specifying what side of the tag element the tooltip appears on.}

\item{fade}{One of \code{TRUE} or \code{FALSE} specifying if the tooltip fades in when
shown and fades out when hidden, defaults to \code{TRUE}.}
}
\description{
Button inputs are useful as triggers for reactive or observer expressions.
The reactive value of a button input begins as \code{NULL}, but subsequently is
the number of clicks.
}
\details{
\subsection{Tooltips}{

To remove a button or link input's tooltip pass an empty tooltip,
\code{tooltip()}, to \code{updateButtonInput()} or \code{updateLinkInput()}.
}

\subsection{Getting started}{

\if{html}{\out{<div class="sourceCode r">}}\preformatted{buttonInput(
  id = NULL,
  label = "Label"
)
}\if{html}{\out{</div>}}

\if{html}{\out{<button class="yonder-button btn" type="button" role="button" autocomplete="off">}}Label\if{html}{\out{</button>}}
}

\subsection{Add a little color}{

\if{html}{\out{<div class="sourceCode r">}}\preformatted{buttonInput(
  .style \%>\%
    background("primary"),
  id = NULL,
  label = "Label"
)
}\if{html}{\out{</div>}}

\if{html}{\out{<button autocomplete="off" class="yonder-button btn btn-primary" role="button" type="button">}}Label\if{html}{\out{</button>}}

Use the \code{width()} utility to adjust the size of a button.

\if{html}{\out{<div class="sourceCode r">}}\preformatted{buttonInput(
  .style \%>\%
    background("danger") \%>\%
    width(75),  # <-
  id = NULL,
  label = "Label"
)
}\if{html}{\out{</div>}}

\if{html}{\out{<button autocomplete="off" class="yonder-button btn btn-danger w-75" role="button" type="button">}}Label\if{html}{\out{</button>}}
}

\subsection{Reactive links}{

\if{html}{\out{<div class="sourceCode r">}}\preformatted{div(
  "Curabitur", linkInput(id = "link1", label = "vulputate"),
  "vestibulum lorem."
)
}\if{html}{\out{</div>}}\if{html}{\out{
<div>
Curabitur
<button class="yonder-link btn btn-link" id="link1">vulputate</button>
vestibulum lorem.
</div>
}}

}

\subsection{Stretched buttons and links}{

Use a stretched button to make an entire card clickable.

\if{html}{\out{<div class="sourceCode r">}}\preformatted{card(
  .style \%>\%
    border("primary") \%>\%
    font("primary"),
  header = "Product summary",
  p("Here is a summary"),
  p("This is a second paragraph"),
  footer = list(
    buttonInput(
      .style \%>\%
        background("primary"),
      id = "seemore",
      label = "See more",
      stretch = TRUE
    )
  )
)
}\if{html}{\out{</div>}}\if{html}{\out{
<div class="card border border-primary text-primary">
<div class="card-header">Product summary</div>
<div class="card-body">
<p class="card-text">Here is a summary</p>
<p class="card-text">This is a second paragraph</p>
</div>
<div class="card-footer">
<button autocomplete="off" class="yonder-button btn stretched-link btn-primary" id="seemore" role="button" type="button">See more</button>
</div>
</div>
}}


Notice, when you hover over the card the mouse cursor changes and the
button appears hovered. The card is now passing clicks on to the button.
Clicking anywhere on the card will trigger a click on the button.

\if{html}{\out{<div class="sourceCode r">}}\preformatted{card(
  header = "Card with stretched button",
  p("Notice when you hover over the card, the button also detects ",
    "the hover."),
  buttonInput(
    .style \%>\%
      background("primary"),
    id = NULL,
    label = "Label",
    stretch = TRUE
  )
)
}\if{html}{\out{</div>}}\if{html}{\out{
<div class="card">
<div class="card-header">Card with stretched button</div>
<div class="card-body">
<p class="card-text">
Notice when you hover over the card, the button also detects 
the hover.
</p>
<button autocomplete="off" class="yonder-button btn stretched-link btn-primary" role="button" type="button">Label</button>
</div>
</div>
}}

}

\subsection{Download button}{

Pair a download button input with \code{shiny::downloadHandler()}.

\if{html}{\out{<div class="sourceCode r">}}\preformatted{buttonInput(
  download = TRUE,  # <-
  id = NULL,
  label = "Download",
  tags$i(class = "fas fa-download")
)
}\if{html}{\out{</div>}}\if{html}{\out{
<a class="yonder-button btn shiny-download-link" type="button" role="button" href="" _target download autocomplete="off">
Download
<i class="fas fa-download"></i>
</a>
}}

}
}
\seealso{
Other inputs: 
\code{\link{buttonGroupInput}()},
\code{\link{checkbarInput}()},
\code{\link{checkboxInput}()},
\code{\link{chipInput}()},
\code{\link{fileInput}()},
\code{\link{formInput}()},
\code{\link{listGroupInput}()},
\code{\link{menuInput}()},
\code{\link{navInput}()},
\code{\link{radioInput}()},
\code{\link{radiobarInput}()},
\code{\link{rangeInput}()},
\code{\link{selectInput}()},
\code{\link{textInput}()}
}
\concept{inputs}
